{"version":3,"sources":["store/states.js","store/store.js","store/reducers.js","store/actions.js","components/AddNode/AddNode.js","components/NodesContainer/NodesContainer.js","pages/Home/index.js","App.js","index.js"],"names":["initialElements","id","type","data","label","position","x","y","source","target","store","createStore","state","action","Math","random","toString","nodeName","nodeType","AddNode","useState","setNodeType","setNodeName","dispatch","useDispatch","Grid","container","sm","lg","xl","item","FormControl","sx","mt","minWidth","InputLabel","Select","value","onChange","e","MenuItem","selected","FormHelperText","TextField","required","event","variant","Button","onClick","NodesContainer","elements","useSelector","style","background","width","height","border","onConnect","gap","size","Home","columnSpacing","xs","md","Typography","align","App","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5077b8ea.chunk.js","sourcesContent":["//an example of the array of object to generate nodes and edges\r\nexport const initialElements = [\r\n  {\r\n    id: '1',\r\n    type: 'input', // inputnode\r\n    data: { label: 'Input Node' },\r\n    position: { x: 100, y: 40 },\r\n  },\r\n  {\r\n    id: '2',\r\n    type: 'output', // inputnode\r\n    data: { label: 'Input Node' },\r\n    position: { x: 100, y: 100 },\r\n  },\r\n  {\r\n    id: '12', //Edge\r\n    source: '1',\r\n    target: '2',\r\n  },\r\n];\r\n","import { createStore } from 'redux';\r\nimport { reducer } from './reducers';\r\n\r\nexport const store = createStore(reducer);\r\n","import { ADD_NODE, ADD_EDGE } from './actions';\r\nimport { initialElements } from './states';\r\nexport const reducer = (state = initialElements, action) => {\r\n  switch (action.type) {\r\n    //add node returns the new state after the new node object to the state array\r\n    case ADD_NODE:\r\n      state = [\r\n        ...state,\r\n        {\r\n          id: Math.random().toString(), //convert the id to string since its required to return a string\r\n          position: { x: 100, y: 50 }, //initial position  for the new node (could be dynamic)\r\n          data: { label: action.nodeName },\r\n          type: action.nodeType,\r\n        },\r\n      ];\r\n      return state;\r\n\r\n    //add edges returns the new state after adding the new edge object to the state array\r\n    case ADD_EDGE:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: Math.random().toString(),\r\n          source: action.source, //source node\r\n          target: action.target, //targeted node\r\n        },\r\n      ];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","//exporting the actions names here (add action name here when adding new actions)\r\nexport const ADD_NODE = 'ADD_NODE';\r\nexport const ADD_EDGE = 'ADD_EDGE';\r\n\r\n//action that return the new node with its name and type\r\nexport function addNode({ nodeType, nodeName }) {\r\n  return {\r\n    type: ADD_NODE,\r\n    payload: { nodeType, nodeName },\r\n  };\r\n}\r\n\r\n//action that return the new edge with its source and target\r\n//return an array of all the elements and the new object which has the id ,source,\r\n//target since the nodes and edges combined in one array of objects\r\nexport function addEdge(elements, { id, source, target }) {\r\n  return {\r\n    type: ADD_EDGE,\r\n    payload: [...elements, { id, source, target }],\r\n  };\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Select from '@mui/material/Select';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormHelperText from '@mui/material/FormHelperText';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nfunction AddNode() {\r\n  const [nodeType, setNodeType] = useState(''); /*to set the node type*/\r\n  const [nodeName, setNodeName] = useState(''); /*to set the node input name*/\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  /*dispatch an action for adding new node when calling this function*/\r\n  const AddNode = () => {\r\n    dispatch({ type: 'ADD_NODE', nodeType, nodeName });\r\n  };\r\n\r\n  return (\r\n    <Grid container>\r\n      {/* get the Node type value from the user input and set it in the NodeType\r\n      state*/}\r\n      <Grid sm={12} lg={12} xl={12} item>\r\n        <FormControl sx={{ mt: 3, minWidth: 400 }}>\r\n          <InputLabel>Node type</InputLabel>\r\n          <Select\r\n            label='Node type'\r\n            value={nodeType}\r\n            onChange={(e) => setNodeType(e.target.value)}\r\n          >\r\n            <MenuItem selected value='default'>\r\n              default\r\n            </MenuItem>\r\n            <MenuItem value='input'>input</MenuItem>\r\n            <MenuItem value='output'>output</MenuItem>\r\n          </Select>\r\n          <FormHelperText>Select your Node Type</FormHelperText>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      {/* get the name value from the user input and set it in the nodeName\r\n      state*/}\r\n      <Grid sm={12} lg={12} xl={12} item>\r\n        <FormControl sx={{ mt: 3, minWidth: 400 }}>\r\n          <TextField\r\n            required\r\n            id='outlined-basic'\r\n            label='Your Node name here'\r\n            onChange={(event) => setNodeName(event.target.value)}\r\n            variant='outlined'\r\n          />\r\n        </FormControl>\r\n      </Grid>\r\n      {/* call the addNode function to dispatch the action and add the new node*/}\r\n      <Grid mt={3} sm={12} lg={12} xl={12} item>\r\n        <Button variant='outlined' onClick={AddNode}>\r\n          Add New Case\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default AddNode;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactFlow, { Background, Controls } from 'react-flow-renderer';\r\n\r\nfunction NodesContainer() {\r\n  //basic styling\r\n  const style = {\r\n    background: '#f6f6f6',\r\n    width: '100%',\r\n    height: 500,\r\n    border: '1px dashed',\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const elements = useSelector((state) => state); //the state selector\r\n\r\n  /* dispatch the add new edge action between tow nodes*/\r\n  const AddEdge = ({ source, target }) => {\r\n    dispatch({\r\n      type: 'ADD_EDGE',\r\n      source,\r\n      target,\r\n    });\r\n  };\r\n\r\n  //returning the react-flow main component and render it\r\n  return (\r\n    <div>\r\n      <ReactFlow style={style} elements={elements} onConnect={AddEdge}>\r\n        <Background variant='dots' gap={12} size={1} />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NodesContainer;\r\n","import React from 'react';\r\nimport AddNode from '../../components/AddNode/AddNode';\r\nimport NodesContainer from '../../components/NodesContainer/NodesContainer';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Typography } from '@mui/material';\r\n\r\nfunction Home() {\r\n  return (\r\n    <Grid container columnSpacing={{ xs: 3, sm: 3, md: 4 }} mt={6}>\r\n      <Grid item sm={8}>\r\n        <NodesContainer />\r\n      </Grid>\r\n      <Grid item sm={4}>\r\n        <Typography variant='h5' align='left'>\r\n          Add a new cases to your flow\r\n        </Typography>\r\n        <AddNode />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Home from './pages/Home';\r\nfunction App() {\r\n  return <Home />;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store';\r\n\r\nimport App from './App';\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}